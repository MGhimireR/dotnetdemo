# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  name: Batch26

variables:
  buildConfiguration: 'Release'
  azureSPNName: 'Azure' 
  azureAppServiceName: 'bermtecdev'
  artifactName: drop

stages:
- stage: 'Build'
  jobs:
  - job: ''
    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: $(artifactName)
        publishLocation: 'Container'

# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: '$(Pipeline.Workspace)'
#     artifact: 'drop'
#     publishLocation: 'pipeline'

#Publish it to the Azure App Service
# - task: AzureWebApp@1
#   inputs:
#     appType: webAppLinux
#     azureSubscription: $(azureSPNName) #this is the name of the SPN
#     appName: $(azureAppServiceName) #App Service's unique name
#     package: $(Build.ArtifactStagingDirectory)/**/*.zip

# - stage: 'DeployDev'
#   displayName: 'Deploy to Dev'
#   variables: 
#     appName: 'bermtecdev'
#   jobs:
#   - deployment: 'Dev'
#     pool:
#       name: test
#     environment: 'Dev'
#     strategy: 
#        runOnce:     
#         deploy:
#           steps:
#            - task: AzureRmWebAppDeployment@4
#              displayName: 'Deploy .NET Code to Azure App Service '
#              inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: 'Azure'
#               appType: 'webApp'
#               WebAppName: $(appName)
#               packageForLinux: '$(Agent.BuildDirectory)/$(artifactName)/$(buildConfiguration)/*.zip'

          #  - task: Bash@3
          #    displayName: '2nd Bash'
          #    inputs:
          #       targetType: 'inline'
          #       script: 'echo $(Agent.BuildDirectory)'

